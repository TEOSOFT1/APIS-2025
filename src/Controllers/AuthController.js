// src/Controllers/AuthController.js
const db = require("../Config/db");
const bcrypt = require("bcrypt");
const { generateToken } = require("../Utils/jwt");
const { handleError } = require("../Utils/errorHandler");

exports.login = async (req, res) => {
  try {
    console.log('üîë Intento de login con:', req.body);
    
    const { usuario, contrase√±a } = req.body;

    if (!usuario || !contrase√±a) {
      console.log('‚ùå Faltan campos obligatorios');
      return res.status(400).json({
        success: false,
        message: "Usuario y contrase√±a son obligatorios"
      });
    }

    // Buscar usuario por correo o documento
    console.log('üîç Buscando usuario:', usuario);
    const user = await db.Usuario.findOne({
      where: {
        [db.Sequelize.Op.or]: [
          { Correo: usuario },
          { Documento: usuario }
        ]
      },
      include: [{
        model: db.Rol,
        attributes: ['IdRol', 'NombreRol']
      }]
    });

    if (!user) {
      console.log('‚ùå Usuario no encontrado');
      return res.status(401).json({
        success: false,
        message: "Credenciales inv√°lidas"
      });
    }

    console.log('‚úÖ Usuario encontrado:', {
      id: user.IdUsuario,
      correo: user.Correo,
      rol: user.Rol ? user.Rol.NombreRol : 'Sin rol'
    });
    
    // Verificar si la contrase√±a est√° encriptada correctamente
    if (!user.Contrase√±a || !user.Contrase√±a.startsWith('$2')) {
      console.log('‚ö†Ô∏è La contrase√±a no est√° encriptada correctamente');
      
      // Encriptar la contrase√±a si no lo est√°
      if (contrase√±a === user.Contrase√±a) {
        console.log('‚úÖ Contrase√±a en texto plano coincide, encriptando...');
        const contrase√±aHash = await bcrypt.hash(contrase√±a, 10);
        await user.update({ Contrase√±a: contrase√±aHash });
        
        // Continuar con el proceso de login
      } else {
        console.log('‚ùå Contrase√±a en texto plano no coincide');
        return res.status(401).json({
          success: false,
          message: "Credenciales inv√°lidas"
        });
      }
    } else {
      // Verificar contrase√±a encriptada
      console.log('üîê Verificando contrase√±a encriptada...');
      const contrase√±aValida = await bcrypt.compare(contrase√±a, user.Contrase√±a);
      
      if (!contrase√±aValida) {
        console.log('‚ùå Contrase√±a incorrecta');
        return res.status(401).json({
          success: false,
          message: "Credenciales inv√°lidas"
        });
      }
      
      console.log('‚úÖ Contrase√±a correcta');
    }

    // Generar token
    console.log('üîë Generando token...');
    const token = generateToken({
      id: user.IdUsuario,
      rol: user.IdRol,
      correo: user.Correo
    });

    console.log('‚úÖ Login exitoso');
    res.status(200).json({
      success: true,
      message: "Inicio de sesi√≥n exitoso",
      token,
      usuario: {
        id: user.IdUsuario,
        nombre: user.Nombre,
        apellido: user.Apellido,
        correo: user.Correo,
        rol: user.Rol ? user.Rol.NombreRol : 'Sin rol'
      }
    });
  } catch (error) {
    console.error('‚ùå Error en login:', error);
    handleError(error, req, res, "Error en login de usuario");
  }
};

exports.register = async (req, res) => {
  try {
    const { idRol, documento, correo, contrase√±a, nombre, apellido, telefono, direccion } = req.body;

    // Validar contrase√±a fuerte
    if (contrase√±a.length < 8) {
      return res.status(400).json({
        success: false,
        message: "La contrase√±a debe tener al menos 8 caracteres"
      });
    }
    
    if (!/[a-zA-Z]/.test(contrase√±a)) {
      return res.status(400).json({
        success: false,
        message: "La contrase√±a debe contener al menos una letra"
      });
    }
    
    if (!/[0-9]/.test(contrase√±a)) {
      return res.status(400).json({
        success: false,
        message: "La contrase√±a debe contener al menos un n√∫mero"
      });
    }
    
    if (!/[!@#$%^&*(),.?":{}|<>]/.test(contrase√±a)) {
      return res.status(400).json({
        success: false,
        message: "La contrase√±a debe contener al menos un car√°cter especial"
      });
    }

    // Verificar si el usuario ya existe
    const usuarioExistente = await db.Usuario.findOne({
      where: {
        [db.Sequelize.Op.or]: [
          { Correo: correo },
          { Documento: documento }
        ]
      }
    });

    if (usuarioExistente) {
      return res.status(400).json({
        success: false,
        message: "El correo o documento ya est√° registrado"
      });
    }

    // Crear el usuario
    const nuevoUsuario = await db.Usuario.create({
      IdRol: idRol,
      Documento: documento,
      Correo: correo,
      Contrase√±a: contrase√±a, // Se encriptar√° autom√°ticamente por el hook
      Nombre: nombre,
      Apellido: apellido,
      Telefono: telefono,
      Direccion: direccion,
      Estado: true
    });

    res.status(201).json({
      success: true,
      message: "Usuario registrado correctamente",
      usuario: {
        id: nuevoUsuario.IdUsuario,
        nombre: nuevoUsuario.Nombre,
        apellido: nuevoUsuario.Apellido,
        correo: nuevoUsuario.Correo
      }
    });
  } catch (error) {
    handleError(error, req, res, "Error al registrar usuario");
  }
};